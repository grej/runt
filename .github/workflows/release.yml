name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0)"
        required: true
        type: string
      dry_run:
        description: "Perform a dry run without actually publishing"
        required: false
        type: boolean
        default: false

env:
  DENO_VERSION: v2.x

jobs:
  validate:
    name: Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
          cache: true

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc, or dev)
          if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi
          echo "Version format is valid: $VERSION"

      - name: Run full test suite
        run: deno test --allow-env --allow-net --allow-read

      - name: Check formatting and linting
        run: |
          deno fmt --check
          deno lint

      - name: Type check all packages
        run: deno check packages/*/mod.ts packages/*/src/*.ts

  update-versions:
    name: Update Versions
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.dry_run != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
          cache: true

      - name: Update schema package version
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          cd packages/schema

          # Update version in deno.json
          deno eval "
          const config = JSON.parse(Deno.readTextFileSync('deno.json'));
          config.version = '$VERSION';
          Deno.writeTextFileSync('deno.json', JSON.stringify(config, null, 2) + '\n');
          "

      - name: Update lib package version
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          cd packages/lib

          # Update version in deno.json
          deno eval "
          const config = JSON.parse(Deno.readTextFileSync('deno.json'));
          config.version = '$VERSION';
          Deno.writeTextFileSync('deno.json', JSON.stringify(config, null, 2) + '\n');
          "

      - name: Commit version updates
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add packages/*/deno.json
          git commit -m "chore: bump version to ${{ needs.validate.outputs.version }}" || exit 0
          git push

  publish-schema:
    name: Publish Schema
    runs-on: ubuntu-latest
    needs: [validate, update-versions]
    if: always() && needs.validate.result == 'success' && (needs.update-versions.result == 'success' || needs.update-versions.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
          cache: true

      - name: Pull latest changes
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
        run: git pull origin main

      - name: Dry run publish schema package
        if: github.event.inputs.dry_run == 'true'
        run: |
          cd packages/schema
          echo "Dry run: Publishing @runt/schema v${{ needs.validate.outputs.version }}"
          deno publish --dry-run --allow-slow-types

      - name: Publish schema package
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd packages/schema
          echo "Publishing @runt/schema v${{ needs.validate.outputs.version }}"
          deno publish --allow-slow-types

  publish-lib:
    name: Publish Lib
    runs-on: ubuntu-latest
    needs: [validate, update-versions, publish-schema]
    if: always() && needs.validate.result == 'success' && needs.publish-schema.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ env.DENO_VERSION }}
          cache: true

      - name: Pull latest changes
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
        run: git pull origin main

      - name: Wait for schema package to be available
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "Waiting for @runt/schema to be available on JSR..."
          sleep 30

      - name: Dry run publish lib package
        if: github.event.inputs.dry_run == 'true'
        run: |
          cd packages/lib
          echo "Dry run: Publishing @runt/lib v${{ needs.validate.outputs.version }}"
          deno publish --dry-run --allow-slow-types

      - name: Publish lib package
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd packages/lib
          echo "Publishing @runt/lib v${{ needs.validate.outputs.version }}"
          deno publish --allow-slow-types

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, publish-schema, publish-lib]
    if: always() && needs.validate.result == 'success' && needs.publish-schema.result == 'success' && needs.publish-lib.result == 'success' && github.event.inputs.dry_run != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # Get the latest tag before this one
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "v$VERSION" | head -n1 || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG="Initial release of runt runtime agent library"
          else
            echo "Generating changelog from $PREVIOUS_TAG to v$VERSION"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" | head -20)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="- Bug fixes and improvements"
            fi
          fi

          # Write changelog to file for GitHub release
          cat > changelog.md << EOF
          ## What's Changed

          $CHANGELOG

          ## Packages Released

          - \`@runt/schema@$VERSION\` - Anode schema for runtime agents and clients
          - \`@runt/lib@$VERSION\` - Runtime agent library for building Anode kernels

          ## Installation

          \`\`\`bash
          # Schema package
          deno add @runt/schema@$VERSION

          # Runtime library
          deno add @runt/lib@$VERSION
          \`\`\`

          **Full Changelog**: https://github.com/runtimed/anode/compare/$PREVIOUS_TAG...v$VERSION
          EOF

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          release_name: v${{ needs.validate.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}

  post-release:
    name: Post Release
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Notify success
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "Successfully released runt v$VERSION!"
          echo "Packages published:"
          echo "  - @runt/schema@$VERSION"
          echo "  - @runt/lib@$VERSION"
          echo "GitHub Release: https://github.com/runtimed/anode/releases/tag/v$VERSION"

      - name: Update documentation
        run: |
          echo "Consider updating documentation with new version examples"
          echo "Consider updating dependent projects to use new version"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [validate, publish-schema, publish-lib, create-release]
    if: always()
    steps:
      - name: Report status
        run: |
          echo "Release workflow completed"
          echo "Validate: ${{ needs.validate.result }}"
          echo "Publish Schema: ${{ needs.publish-schema.result }}"
          echo "Publish Lib: ${{ needs.publish-lib.result }}"
          echo "Create Release: ${{ needs.create-release.result }}"

          if [[ "${{ needs.validate.result }}" == "failure" || "${{ needs.publish-schema.result }}" == "failure" || "${{ needs.publish-lib.result }}" == "failure" ]]; then
            echo "Release failed - check the logs above"
            exit 1
          fi
